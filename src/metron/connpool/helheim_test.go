// This file was generated by github.com/nelsam/hel.  Do not
// edit this code by hand unless you *really* know what you're
// doing.  Expect any changes made manually to be overwritten
// the next time hel regenerates this file.

package connpool_test

import "io"

type mockConnCreator struct {
	CreateCalled chan bool
	CreateOutput struct {
		Ret0 chan io.WriteCloser
	}
}

func newMockConnCreator() *mockConnCreator {
	m := &mockConnCreator{}
	m.CreateCalled = make(chan bool, 100)
	m.CreateOutput.Ret0 = make(chan io.WriteCloser, 100)
	return m
}
func (m *mockConnCreator) Create() io.WriteCloser {
	m.CreateCalled <- true
	return <-m.CreateOutput.Ret0
}

type mockWriteCloser struct {
	WriteCalled chan bool
	WriteInput  struct {
		P chan []byte
	}
	WriteOutput struct {
		N   chan int
		Err chan error
	}
	CloseCalled chan bool
	CloseOutput struct {
		Ret0 chan error
	}
}

func newMockWriteCloser() *mockWriteCloser {
	m := &mockWriteCloser{}
	m.WriteCalled = make(chan bool, 100)
	m.WriteInput.P = make(chan []byte, 100)
	m.WriteOutput.N = make(chan int, 100)
	m.WriteOutput.Err = make(chan error, 100)
	m.CloseCalled = make(chan bool, 100)
	m.CloseOutput.Ret0 = make(chan error, 100)
	return m
}
func (m *mockWriteCloser) Write(p []byte) (n int, err error) {
	m.WriteCalled <- true
	m.WriteInput.P <- p
	return <-m.WriteOutput.N, <-m.WriteOutput.Err
}
func (m *mockWriteCloser) Close() error {
	m.CloseCalled <- true
	return <-m.CloseOutput.Ret0
}
